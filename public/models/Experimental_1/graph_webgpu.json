{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void sgemm_81e90e8b08464e9a44e7910ad875fd886afeba4c8b6adf24eec65a4b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 0\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_6c3fe15251e34bb9bb767c4b3bdcbbb857f4b7c1cee37d7535b0d5a7(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int D0 = meta_buffer[6];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v7 = v3[d0];\n        const float v8 = v5[d0];\n        float v9;\n        {\n            v9 = v8 * v7;\n        }\n        const float v10 = v1[d0];\n        float v11;\n        {\n            v11 = v9 + v10;\n        }\n        const float v12 = v4[d0];\n        float v13;\n        {\n            v13 = v11 + v12;\n        }\n        const float v14 = v2[d0];\n        float v15;\n        {\n            v15 = v13 + v14;\n        }\n        float v16;\n        {\n            v16 = v15 > 0 ? v15 : 0;\n        }\n        v6[d0] = v16;\n    }\n}\n\n\nkernel void reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n\n    const int N = meta_buffer[2];\n\n    for (int gid = index; gid < N; gid += num_threads) {\n        y[gid] = x[gid];\n    }\n}\n\n\nkernel void transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int v3 = meta_buffer[2];\n    const int v4 = meta_buffer[3];\n    const int D0 = meta_buffer[4];\n    const int D1 = meta_buffer[5];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v5 = v1[d0*v3 + d1];\n            float v6;\n            {\n                v6 = v5;\n            }\n            v2[d0 + d1*v4] = v6;\n        }\n    }\n}\n\n\nkernel void im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_0c9d7400d071e497d58b717b05f61e05acec8975582d7c178944aa11(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v9;\n            }\n            float v15;\n            {\n                v15 = v14 + v12;\n            }\n            float v16;\n            {\n                v16 = v15 + v11;\n            }\n            float v17;\n            {\n                v17 = v16 + v10;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_bf6ad00bab251ae7f6cdece42d680c9dc49bd9baa1a664c44afd512f(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v6[d0*v9 + d1];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_96503f0b27a5a109a0e34ff89d0b6b3b00095a9f9eb5063b25425f5d(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v9;\n            }\n            float v15;\n            {\n                v15 = v14 + v12;\n            }\n            float v16;\n            {\n                v16 = v15 + v10;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_942020ead00b183aa4129c157b8298939a7e380bf7029b18651c6e20(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 + v13;\n            }\n            float v19;\n            {\n                v19 = v18 + v11;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_a378d01919da723ccc21bb842a38d042b076a10810005366a7e69d9e(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v12;\n            }\n            float v15;\n            {\n                v15 = v14 + v11;\n            }\n            float v16;\n            {\n                v16 = v15 + v10;\n            }\n            float v17;\n            {\n                v17 = v16 + v9;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_1794060e204227e465fbeea0857dbe04fb1aa2595bdbcefb29068187(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v13;\n            }\n            float v17;\n            {\n                v17 = v16 + v14;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 + v12;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_a66cb0e7755addfa5a1076a20b29acb5e435642b0189f026614566c9(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v9;\n            }\n            float v15;\n            {\n                v15 = v14 + v10;\n            }\n            float v16;\n            {\n                v16 = v15 + v11;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_346835ae7e1be494a22e1e2a7236d294f3f80f7748c5c16e8dc227a3(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v13;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 + v12;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c3e81c1bb0df525eeee9d2324ffc7aabca1955402a79ac78d6dfde00(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v10;\n            }\n            float v15;\n            {\n                v15 = v14 + v12;\n            }\n            float v16;\n            {\n                v16 = v15 + v9;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_2d686a7b18221708a29c3d17e2fe10dde26c0f47b48d9af521502782(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v13;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 + v14;\n            }\n            float v19;\n            {\n                v19 = v18 + v11;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c5f0ae7c9e948b6e5655f4de23df96fdfbb8af2ebe9ce207a53436a8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v9;\n            }\n            float v15;\n            {\n                v15 = v14 + v11;\n            }\n            float v16;\n            {\n                v16 = v15 + v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v10;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_f26ffba215e5b5c5fdccb5a7c239a7bc2404594ec25890ce5b0b86b4(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v13;\n            }\n            float v18;\n            {\n                v18 = v17 + v14;\n            }\n            float v19;\n            {\n                v19 = v18 + v11;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c32fccc597dae7b9b05a770fa9ae7e6b501e19040cbcea41034976b3(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v11;\n            }\n            float v15;\n            {\n                v15 = v14 + v12;\n            }\n            float v16;\n            {\n                v16 = v15 + v10;\n            }\n            float v17;\n            {\n                v17 = v16 + v9;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_ed6f484f66223c4309a6a20ef89f199dfd2d8f7f9a2e38a24985af53(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 + v14;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_31e88a7629254688a1dedabb0d9bef5873c48eebabad9d9d8b2bf583(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v9;\n            }\n            float v15;\n            {\n                v15 = v14 + v10;\n            }\n            float v16;\n            {\n                v16 = v15 + v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_1c48058e03eef71d4698340cdb600b45ac1ad7b89add07d0601bdc9b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v11;\n            }\n            float v15;\n            {\n                v15 = v14 + v10;\n            }\n            float v16;\n            {\n                v16 = v15 + v9;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_75d4d1c8b5ea831de83d96b401dcf1620aadd9bed516f4ed99dc9be1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 + v14;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_57803c8e21f24b80b9a48a94572ec99e68aae6437d08b0887414d4a4(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v10;\n            }\n            float v15;\n            {\n                v15 = v14 + v11;\n            }\n            float v16;\n            {\n                v16 = v15 + v9;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_79d6bcfbae7455374c58788e0677368ed1582f4355f42992675a7014(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v11;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 + v14;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_b6478411cbd03b26ddcba9cb6f2646ae4f6001563b8f2e7c79a12549(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 + v12;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_00e9cad0d10f7f6d9abf243165ae7248ec4b47077f94fb9ab30b921d(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v12;\n            }\n            float v15;\n            {\n                v15 = v14 + v9;\n            }\n            float v16;\n            {\n                v16 = v15 + v11;\n            }\n            float v17;\n            {\n                v17 = v16 + v10;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_e74ba8af15ffc47a1a302f49a74631f65d4ff8cef1a3d5e424163d3f(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v11;\n            }\n            float v18;\n            {\n                v18 = v17 + v12;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c3a1b367ba371b04fa316e7ff9024517c455860c7a6f0b71faf2147a(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v10;\n            }\n            float v15;\n            {\n                v15 = v14 + v12;\n            }\n            float v16;\n            {\n                v16 = v15 + v11;\n            }\n            float v17;\n            {\n                v17 = v16 + v9;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_0fe8f69086c4f91b38a5dee7f02882ac427d9675bc71731e092a5bca(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v6[d0 + d1*v9];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v13;\n            }\n            float v18;\n            {\n                v18 = v17 + v12;\n            }\n            float v19;\n            {\n                v19 = v18 + v11;\n            }\n            const float v20 = v5[d0 + d1*v8];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_b0942cfacb185abccf56211e68f98e1e0ee56675067b4ef87f96e978(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v11;\n            }\n            float v15;\n            {\n                v15 = v14 + v9;\n            }\n            float v16;\n            {\n                v16 = v15 + v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v10;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_df05549e9cc9aed2e4cc4e7f3fd4bc9ab886995aabbd11b064936eef(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v14;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_76457395233277b1a63d01a0308fed92a7d5243eab6c1500e9ba385c(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v13;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 + v12;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_17e2ed4a73d7b5f3b16df388658186bad092d930f81e80ab1e944aab(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        const float v11 = v3[d0];\n        const float v12 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v11;\n            }\n            float v15;\n            {\n                v15 = v14 + v9;\n            }\n            float v16;\n            {\n                v16 = v15 + v10;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 > 0 ? v17 : 0;\n            }\n            v6[d0 + d1*v8] = v18;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_28f1bb6036fd1e0b6608fe4c78dc5713ec8fb34ec3c951e6c0ca10ed(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v13;\n            }\n            float v18;\n            {\n                v18 = v17 + v14;\n            }\n            float v19;\n            {\n                v19 = v18 + v11;\n            }\n            const float v20 = v6[d0 + d1*v9];\n            float v21;\n            {\n                v21 = v19 + v20;\n            }\n            v7[d0 + d1*v10] = v21;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_673274f650490094ef3dca996289aa76eb41d449f78ccb98c2da7674(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    const device float * v6 = (static_buffer + meta_buffer[5]);\n    device float * v7 = (static_buffer + meta_buffer[6]);\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int D0 = meta_buffer[10];\n    const int D1 = meta_buffer[11];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v11 = v1[d0];\n        const float v12 = v2[d0];\n        const float v13 = v3[d0];\n        const float v14 = v4[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v14;\n            }\n            float v17;\n            {\n                v17 = v16 + v12;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 + v13;\n            }\n            float v20;\n            {\n                v20 = v19 > 0 ? v19 : 0;\n            }\n            const float v21 = v6[d0*v9 + d1];\n            float v22;\n            {\n                v22 = v20 + v21;\n            }\n            v7[d0 + d1*v10] = v22;\n        }\n    }\n}\n\n\nkernel void elementwiseadd_de265f5f24d651945d05e27082b8e6d7eb254ba11e717ff5410bd5dc(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            v3[d0 + d1*v5] = v8;\n        }\n    }\n}\n\n\nkernel void depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f(device float * static_buffer[[buffer(0)]],\n                     device float * dynamic_buffer[[buffer(1)]],\n                     const device int * meta_buffer[[buffer(2)]],\n                     uint index[[thread_position_in_grid]],\n                     uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n    const int r = meta_buffer[2];\n\n    const int N = meta_buffer[3];\n    const int C1 = meta_buffer[4];\n    const int C2 = meta_buffer[5];\n    const int H1 = meta_buffer[6];\n    const int H2 = meta_buffer[7];\n    const int W1 = meta_buffer[8];\n    const int W2 = meta_buffer[9];\n\n    for (int gid = index; gid < N*H2*W2*C2; gid += num_threads) {\n        const int c2 = gid % C2;\n        const int w2 = gid / C2 % W2;\n        const int h2 = gid / C2 / W2 % H2;\n        const int n = gid / C2 / W2 / H2;\n        const int w1 = w2 / r;\n        const int h1 = h2 / r;\n        const int c1 = c2 + (w2 % r) * C2 + (h2 % r) * C2 * r;\n        y[gid] = x[((n*H1+h1)*W1+w1)*C1+c1];\n    }\n}\n\n\nkernel void fusedelementwise_d4216f786c466d27581f7d0946421edc417ea551d24ebc1503de8fba(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    device float * v5 = (static_buffer + meta_buffer[4]);\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int D0 = meta_buffer[7];\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        const float v9 = v2[d0];\n        const float v10 = v3[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v11 = v4[d0 + d1*v6];\n            float v12;\n            {\n                v12 = v11 * v8;\n            }\n            float v13;\n            {\n                v13 = v12 + v10;\n            }\n            float v14;\n            {\n                v14 = v13 + v9;\n            }\n            float v15;\n            {\n                v15 = v14 > 0 ? v14 : 0;\n            }\n            v5[d0 + d1*v7] = v15;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_a9f5065da5368b48ed7fe51e0bec5ae3a79fbdfa3dd3a8615e540cc0(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    device float * v5 = (static_buffer + meta_buffer[4]);\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int D0 = meta_buffer[7];\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        const float v9 = v2[d0];\n        const float v10 = v3[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v11 = v4[d0 + d1*v6];\n            float v12;\n            {\n                v12 = v11 * v10;\n            }\n            float v13;\n            {\n                v13 = v12 + v9;\n            }\n            float v14;\n            {\n                v14 = v13 + v8;\n            }\n            float v15;\n            {\n                v15 = v14 > 0 ? v14 : 0;\n            }\n            v5[d0 + d1*v7] = v15;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_ec34fcb21bafdc7ba94237e7687d24dd1182d59309b0c2513bd27866(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    device float * v5 = (static_buffer + meta_buffer[4]);\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int D0 = meta_buffer[7];\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        const float v9 = v2[d0];\n        const float v10 = v3[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v11 = v4[d0 + d1*v6];\n            float v12;\n            {\n                v12 = v11 * v9;\n            }\n            float v13;\n            {\n                v13 = v12 + v8;\n            }\n            float v14;\n            {\n                v14 = v13 + v10;\n            }\n            float v15;\n            {\n                v15 = v14 > 0 ? v14 : 0;\n            }\n            v5[d0 + d1*v7] = v15;\n        }\n    }\n}\n\n\nkernel void sgemm_2f5fb17c61936ed97c3b40058a42f14de9b21cb6b4208d457114dbc7(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_31fb3d644a3935a7507669df865145bfcfe84bf6657c41f8fa2f8cc2(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                v9 = tanh(v8);\n            }\n            v3[d0*v5 + d1] = v9;\n        }\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "sgemm_81e90e8b08464e9a44e7910ad875fd886afeba4c8b6adf24eec65a4b",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 256,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        100,
        5,
        0,
        0,
        0,
        0,
        3,
        179,
        152,
        0,
        1,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        166,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_6c3fe15251e34bb9bb767c4b3bdcbbb857f4b7c1cee37d7535b0d5a7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        0,
        42,
        0,
        0,
        64,
        42,
        0,
        0,
        192,
        41,
        0,
        0,
        128,
        41,
        0,
        3,
        179,
        152,
        0,
        3,
        243,
        152,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        152,
        0,
        3,
        115,
        152,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        152,
        0,
        3,
        179,
        152,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        152,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        128,
        42,
        0,
        3,
        179,
        153,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_0c9d7400d071e497d58b717b05f61e05acec8975582d7c178944aa11",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        16,
        43,
        0,
        0,
        16,
        43,
        0,
        64,
        16,
        43,
        0,
        192,
        16,
        43,
        0,
        3,
        179,
        153,
        0,
        3,
        243,
        153,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        17,
        43,
        0,
        3,
        179,
        152,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bf6ad00bab251ae7f6cdece42d680c9dc49bd9baa1a664c44afd512f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        161,
        43,
        0,
        192,
        161,
        43,
        0,
        0,
        161,
        43,
        0,
        128,
        161,
        43,
        0,
        3,
        179,
        152,
        0,
        3,
        115,
        152,
        0,
        3,
        179,
        153,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        162,
        43,
        0,
        3,
        115,
        153,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_96503f0b27a5a109a0e34ff89d0b6b3b00095a9f9eb5063b25425f5d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        50,
        44,
        0,
        64,
        50,
        44,
        0,
        0,
        50,
        44,
        0,
        192,
        50,
        44,
        0,
        3,
        115,
        153,
        0,
        3,
        243,
        153,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        51,
        44,
        0,
        3,
        51,
        154,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_942020ead00b183aa4129c157b8298939a7e380bf7029b18651c6e20",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        195,
        44,
        0,
        192,
        195,
        44,
        0,
        64,
        195,
        44,
        0,
        128,
        195,
        44,
        0,
        3,
        51,
        154,
        0,
        3,
        179,
        153,
        0,
        3,
        243,
        153,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        196,
        44,
        0,
        3,
        179,
        152,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_a378d01919da723ccc21bb842a38d042b076a10810005366a7e69d9e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        84,
        45,
        0,
        64,
        84,
        45,
        0,
        192,
        84,
        45,
        0,
        128,
        84,
        45,
        0,
        3,
        179,
        152,
        0,
        3,
        243,
        152,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        152,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        85,
        45,
        0,
        3,
        115,
        153,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_1794060e204227e465fbeea0857dbe04fb1aa2595bdbcefb29068187",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        229,
        45,
        0,
        0,
        229,
        45,
        0,
        128,
        229,
        45,
        0,
        192,
        229,
        45,
        0,
        3,
        243,
        153,
        0,
        3,
        115,
        153,
        0,
        3,
        51,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        230,
        45,
        0,
        3,
        179,
        152,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_a66cb0e7755addfa5a1076a20b29acb5e435642b0189f026614566c9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        118,
        46,
        0,
        128,
        118,
        46,
        0,
        0,
        118,
        46,
        0,
        192,
        118,
        46,
        0,
        3,
        179,
        152,
        0,
        3,
        115,
        153,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        119,
        46,
        0,
        3,
        179,
        153,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_346835ae7e1be494a22e1e2a7236d294f3f80f7748c5c16e8dc227a3",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        7,
        47,
        0,
        192,
        7,
        47,
        0,
        128,
        7,
        47,
        0,
        64,
        7,
        47,
        0,
        3,
        51,
        154,
        0,
        3,
        179,
        153,
        0,
        3,
        179,
        152,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        152,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        8,
        47,
        0,
        3,
        243,
        153,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c3e81c1bb0df525eeee9d2324ffc7aabca1955402a79ac78d6dfde00",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        152,
        47,
        0,
        64,
        152,
        47,
        0,
        192,
        152,
        47,
        0,
        128,
        152,
        47,
        0,
        3,
        243,
        153,
        0,
        3,
        115,
        153,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        153,
        47,
        0,
        3,
        115,
        153,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_2d686a7b18221708a29c3d17e2fe10dde26c0f47b48d9af521502782",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        41,
        48,
        0,
        128,
        41,
        48,
        0,
        64,
        41,
        48,
        0,
        0,
        41,
        48,
        0,
        3,
        115,
        153,
        0,
        3,
        179,
        152,
        0,
        3,
        51,
        153,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        42,
        48,
        0,
        3,
        179,
        152,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c5f0ae7c9e948b6e5655f4de23df96fdfbb8af2ebe9ce207a53436a8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        186,
        48,
        0,
        192,
        186,
        48,
        0,
        128,
        186,
        48,
        0,
        0,
        186,
        48,
        0,
        3,
        179,
        152,
        0,
        3,
        243,
        152,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        152,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        187,
        48,
        0,
        3,
        51,
        154,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f26ffba215e5b5c5fdccb5a7c239a7bc2404594ec25890ce5b0b86b4",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        75,
        49,
        0,
        64,
        75,
        49,
        0,
        128,
        75,
        49,
        0,
        0,
        75,
        49,
        0,
        3,
        51,
        153,
        0,
        3,
        51,
        154,
        0,
        3,
        179,
        152,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        152,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        76,
        49,
        0,
        3,
        179,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c32fccc597dae7b9b05a770fa9ae7e6b501e19040cbcea41034976b3",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        220,
        49,
        0,
        0,
        220,
        49,
        0,
        64,
        220,
        49,
        0,
        128,
        220,
        49,
        0,
        3,
        179,
        155,
        0,
        3,
        179,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        221,
        49,
        0,
        3,
        243,
        154,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_ed6f484f66223c4309a6a20ef89f199dfd2d8f7f9a2e38a24985af53",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        109,
        50,
        0,
        64,
        109,
        50,
        0,
        192,
        109,
        50,
        0,
        0,
        109,
        50,
        0,
        3,
        179,
        152,
        0,
        3,
        243,
        154,
        0,
        3,
        51,
        155,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        155,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        110,
        50,
        0,
        3,
        243,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_31e88a7629254688a1dedabb0d9bef5873c48eebabad9d9d8b2bf583",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        254,
        50,
        0,
        128,
        254,
        50,
        0,
        192,
        254,
        50,
        0,
        0,
        254,
        50,
        0,
        3,
        243,
        155,
        0,
        3,
        179,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        255,
        50,
        0,
        3,
        115,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_942020ead00b183aa4129c157b8298939a7e380bf7029b18651c6e20",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        143,
        51,
        0,
        128,
        143,
        51,
        0,
        0,
        143,
        51,
        0,
        64,
        143,
        51,
        0,
        3,
        115,
        155,
        0,
        3,
        51,
        155,
        0,
        3,
        179,
        155,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        155,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        144,
        51,
        0,
        3,
        51,
        154,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_1c48058e03eef71d4698340cdb600b45ac1ad7b89add07d0601bdc9b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        32,
        52,
        0,
        192,
        32,
        52,
        0,
        128,
        32,
        52,
        0,
        0,
        32,
        52,
        0,
        3,
        51,
        154,
        0,
        3,
        115,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        33,
        52,
        0,
        3,
        51,
        154,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_75d4d1c8b5ea831de83d96b401dcf1620aadd9bed516f4ed99dc9be1",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        177,
        52,
        0,
        128,
        177,
        52,
        0,
        0,
        177,
        52,
        0,
        64,
        177,
        52,
        0,
        3,
        51,
        154,
        0,
        3,
        179,
        155,
        0,
        3,
        179,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        178,
        52,
        0,
        3,
        115,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_57803c8e21f24b80b9a48a94572ec99e68aae6437d08b0887414d4a4",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        66,
        53,
        0,
        64,
        66,
        53,
        0,
        128,
        66,
        53,
        0,
        192,
        66,
        53,
        0,
        3,
        115,
        155,
        0,
        3,
        179,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        67,
        53,
        0,
        3,
        51,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_79d6bcfbae7455374c58788e0677368ed1582f4355f42992675a7014",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        211,
        53,
        0,
        128,
        211,
        53,
        0,
        192,
        211,
        53,
        0,
        0,
        211,
        53,
        0,
        3,
        179,
        156,
        0,
        3,
        51,
        155,
        0,
        3,
        243,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        212,
        53,
        0,
        3,
        51,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_a66cb0e7755addfa5a1076a20b29acb5e435642b0189f026614566c9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        100,
        54,
        0,
        192,
        100,
        54,
        0,
        64,
        100,
        54,
        0,
        0,
        100,
        54,
        0,
        3,
        51,
        155,
        0,
        3,
        51,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        101,
        54,
        0,
        3,
        115,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_b6478411cbd03b26ddcba9cb6f2646ae4f6001563b8f2e7c79a12549",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        245,
        54,
        0,
        64,
        245,
        54,
        0,
        0,
        245,
        54,
        0,
        128,
        245,
        54,
        0,
        3,
        115,
        155,
        0,
        3,
        243,
        154,
        0,
        3,
        179,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        246,
        54,
        0,
        3,
        51,
        156,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_00e9cad0d10f7f6d9abf243165ae7248ec4b47077f94fb9ab30b921d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        134,
        55,
        0,
        192,
        134,
        55,
        0,
        0,
        134,
        55,
        0,
        64,
        134,
        55,
        0,
        3,
        51,
        156,
        0,
        3,
        51,
        155,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        155,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        135,
        55,
        0,
        3,
        51,
        154,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e74ba8af15ffc47a1a302f49a74631f65d4ff8cef1a3d5e424163d3f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        23,
        56,
        0,
        0,
        23,
        56,
        0,
        192,
        23,
        56,
        0,
        64,
        23,
        56,
        0,
        3,
        179,
        154,
        0,
        3,
        51,
        154,
        0,
        3,
        115,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        24,
        56,
        0,
        3,
        51,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c3a1b367ba371b04fa316e7ff9024517c455860c7a6f0b71faf2147a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        168,
        56,
        0,
        64,
        168,
        56,
        0,
        0,
        168,
        56,
        0,
        128,
        168,
        56,
        0,
        3,
        51,
        155,
        0,
        3,
        179,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        169,
        56,
        0,
        3,
        179,
        156,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_0fe8f69086c4f91b38a5dee7f02882ac427d9675bc71731e092a5bca",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        57,
        57,
        0,
        0,
        57,
        57,
        0,
        128,
        57,
        57,
        0,
        64,
        57,
        57,
        0,
        3,
        115,
        154,
        0,
        3,
        179,
        156,
        0,
        3,
        51,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        58,
        57,
        0,
        3,
        179,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_b0942cfacb185abccf56211e68f98e1e0ee56675067b4ef87f96e978",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        202,
        57,
        0,
        0,
        202,
        57,
        0,
        128,
        202,
        57,
        0,
        64,
        202,
        57,
        0,
        3,
        179,
        155,
        0,
        3,
        243,
        155,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        155,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        203,
        57,
        0,
        3,
        179,
        156,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_df05549e9cc9aed2e4cc4e7f3fd4bc9ab886995aabbd11b064936eef",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        91,
        58,
        0,
        128,
        91,
        58,
        0,
        0,
        91,
        58,
        0,
        192,
        91,
        58,
        0,
        3,
        179,
        156,
        0,
        3,
        51,
        156,
        0,
        3,
        115,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        92,
        58,
        0,
        3,
        179,
        156,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_57803c8e21f24b80b9a48a94572ec99e68aae6437d08b0887414d4a4",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        236,
        58,
        0,
        128,
        236,
        58,
        0,
        192,
        236,
        58,
        0,
        0,
        236,
        58,
        0,
        3,
        179,
        156,
        0,
        3,
        243,
        154,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        154,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        237,
        58,
        0,
        3,
        115,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_76457395233277b1a63d01a0308fed92a7d5243eab6c1500e9ba385c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        125,
        59,
        0,
        0,
        125,
        59,
        0,
        192,
        125,
        59,
        0,
        128,
        125,
        59,
        0,
        3,
        115,
        155,
        0,
        3,
        115,
        156,
        0,
        3,
        51,
        155,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        155,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        126,
        59,
        0,
        3,
        51,
        156,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_17e2ed4a73d7b5f3b16df388658186bad092d930f81e80ab1e944aab",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        14,
        60,
        0,
        0,
        14,
        60,
        0,
        64,
        14,
        60,
        0,
        192,
        14,
        60,
        0,
        3,
        51,
        156,
        0,
        3,
        115,
        156,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        156,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        15,
        60,
        0,
        3,
        115,
        155,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_28f1bb6036fd1e0b6608fe4c78dc5713ec8fb34ec3c951e6c0ca10ed",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        159,
        60,
        0,
        64,
        159,
        60,
        0,
        128,
        159,
        60,
        0,
        0,
        159,
        60,
        0,
        3,
        115,
        155,
        0,
        3,
        51,
        155,
        0,
        3,
        243,
        152,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        243,
        152,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        160,
        60,
        0,
        3,
        179,
        152,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_673274f650490094ef3dca996289aa76eb41d449f78ccb98c2da7674",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        48,
        61,
        0,
        128,
        48,
        61,
        0,
        192,
        48,
        61,
        0,
        64,
        48,
        61,
        0,
        3,
        179,
        152,
        0,
        3,
        115,
        152,
        0,
        3,
        179,
        153,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        179,
        153,
        0,
        3,
        51,
        149,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        0,
        49,
        61,
        0,
        3,
        115,
        151,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_de265f5f24d651945d05e27082b8e6d7eb254ba11e717ff5410bd5dc",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        113,
        63,
        0,
        3,
        115,
        151,
        0,
        3,
        115,
        152,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        115,
        152,
        0,
        3,
        51,
        150,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        32,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_d4216f786c466d27581f7d0946421edc417ea551d24ebc1503de8fba",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        114,
        63,
        0,
        128,
        114,
        63,
        0,
        0,
        114,
        63,
        0,
        3,
        51,
        150,
        0,
        3,
        51,
        149,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 1156,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        3,
        51,
        136,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 16,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        136,
        0,
        192,
        114,
        63,
        0,
        3,
        51,
        145,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_de265f5f24d651945d05e27082b8e6d7eb254ba11e717ff5410bd5dc",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        178,
        65,
        0,
        3,
        51,
        145,
        0,
        3,
        51,
        136,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        136,
        0,
        3,
        51,
        145,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_a9f5065da5368b48ed7fe51e0bec5ae3a79fbdfa3dd3a8615e540cc0",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        180,
        65,
        0,
        192,
        179,
        65,
        0,
        0,
        180,
        65,
        0,
        3,
        51,
        145,
        0,
        3,
        51,
        149,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 4356,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        149,
        0,
        3,
        51,
        68,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 64,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        68,
        0,
        128,
        180,
        65,
        0,
        3,
        51,
        104,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_de265f5f24d651945d05e27082b8e6d7eb254ba11e717ff5410bd5dc",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        244,
        67,
        0,
        3,
        51,
        104,
        0,
        3,
        51,
        120,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "depth2space_80400f914882037720ae1b1a8c35fd1640e44514f2d25ba012fd9f6f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        120,
        0,
        3,
        51,
        136,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_ec34fcb21bafdc7ba94237e7687d24dd1182d59309b0c2513bd27866",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        245,
        67,
        0,
        192,
        245,
        67,
        0,
        0,
        246,
        67,
        0,
        3,
        51,
        136,
        0,
        3,
        51,
        84,
        5,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 18496,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        84,
        5,
        3,
        51,
        68,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_2f5fb17c61936ed97c3b40058a42f14de9b21cb6b4208d457114dbc7",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        3,
        51,
        68,
        0,
        64,
        246,
        67,
        0,
        3,
        51,
        84,
        5,
        0,
        64,
        0,
        0,
        3,
        0,
        0,
        0,
        64,
        20,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_31fb3d644a3935a7507669df865145bfcfe84bf6657c41f8fa2f8cc2",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        51,
        68,
        0,
        3,
        51,
        84,
        5,
        3,
        115,
        152,
        0,
        3,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "raw",
  "memory_layout": {
    "static": {
      "size": 90452905,
      "allocations": {
        "a512": {
          "name": "a512",
          "offset": 90452739,
          "size": 166
        },
        "a514": {
          "name": "a514",
          "offset": 10007299,
          "size": 16384
        },
        "a515": {
          "name": "a515",
          "offset": 10023683,
          "size": 16384
        },
        "a516": {
          "name": "a516",
          "offset": 9990915,
          "size": 16384
        },
        "a517": {
          "name": "a517",
          "offset": 10007299,
          "size": 16384
        },
        "a518": {
          "name": "a518",
          "offset": 9777923,
          "size": 147456
        },
        "a519": {
          "name": "a519",
          "offset": 10072835,
          "size": 16384
        },
        "a520": {
          "name": "a520",
          "offset": 10089219,
          "size": 16384
        },
        "a521": {
          "name": "a521",
          "offset": 9777923,
          "size": 147456
        },
        "a522": {
          "name": "a522",
          "offset": 10007299,
          "size": 16384
        },
        "a523": {
          "name": "a523",
          "offset": 10072835,
          "size": 16384
        },
        "a524": {
          "name": "a524",
          "offset": 9777923,
          "size": 147456
        },
        "a525": {
          "name": "a525",
          "offset": 10056451,
          "size": 16384
        },
        "a526": {
          "name": "a526",
          "offset": 10089219,
          "size": 16384
        },
        "a527": {
          "name": "a527",
          "offset": 9777923,
          "size": 147456
        },
        "a528": {
          "name": "a528",
          "offset": 10105603,
          "size": 16384
        },
        "a529": {
          "name": "a529",
          "offset": 10089219,
          "size": 16384
        },
        "a530": {
          "name": "a530",
          "offset": 9777923,
          "size": 147456
        },
        "a531": {
          "name": "a531",
          "offset": 10007299,
          "size": 16384
        },
        "a532": {
          "name": "a532",
          "offset": 10023683,
          "size": 16384
        },
        "a533": {
          "name": "a533",
          "offset": 9777923,
          "size": 147456
        },
        "a534": {
          "name": "a534",
          "offset": 10056451,
          "size": 16384
        },
        "a535": {
          "name": "a535",
          "offset": 10105603,
          "size": 16384
        },
        "a536": {
          "name": "a536",
          "offset": 9777923,
          "size": 147456
        },
        "a537": {
          "name": "a537",
          "offset": 10007299,
          "size": 16384
        },
        "a538": {
          "name": "a538",
          "offset": 10056451,
          "size": 16384
        },
        "a539": {
          "name": "a539",
          "offset": 9777923,
          "size": 147456
        },
        "a540": {
          "name": "a540",
          "offset": 10072835,
          "size": 16384
        },
        "a541": {
          "name": "a541",
          "offset": 10007299,
          "size": 16384
        },
        "a542": {
          "name": "a542",
          "offset": 9777923,
          "size": 147456
        },
        "a543": {
          "name": "a543",
          "offset": 10089219,
          "size": 16384
        },
        "a544": {
          "name": "a544",
          "offset": 10056451,
          "size": 16384
        },
        "a545": {
          "name": "a545",
          "offset": 9777923,
          "size": 147456
        },
        "a546": {
          "name": "a546",
          "offset": 10056451,
          "size": 16384
        },
        "a547": {
          "name": "a547",
          "offset": 10040067,
          "size": 16384
        },
        "a548": {
          "name": "a548",
          "offset": 9777923,
          "size": 147456
        },
        "a549": {
          "name": "a549",
          "offset": 10007299,
          "size": 16384
        },
        "a550": {
          "name": "a550",
          "offset": 10023683,
          "size": 16384
        },
        "a551": {
          "name": "a551",
          "offset": 9777923,
          "size": 147456
        },
        "a552": {
          "name": "a552",
          "offset": 10105603,
          "size": 16384
        },
        "a553": {
          "name": "a553",
          "offset": 10007299,
          "size": 16384
        },
        "a554": {
          "name": "a554",
          "offset": 9777923,
          "size": 147456
        },
        "a555": {
          "name": "a555",
          "offset": 10203907,
          "size": 16384
        },
        "a556": {
          "name": "a556",
          "offset": 10269443,
          "size": 16384
        },
        "a557": {
          "name": "a557",
          "offset": 9777923,
          "size": 147456
        },
        "a558": {
          "name": "a558",
          "offset": 10154755,
          "size": 16384
        },
        "a559": {
          "name": "a559",
          "offset": 10171139,
          "size": 16384
        },
        "a560": {
          "name": "a560",
          "offset": 9777923,
          "size": 147456
        },
        "a561": {
          "name": "a561",
          "offset": 10220291,
          "size": 16384
        },
        "a562": {
          "name": "a562",
          "offset": 10269443,
          "size": 16384
        },
        "a563": {
          "name": "a563",
          "offset": 9777923,
          "size": 147456
        },
        "a564": {
          "name": "a564",
          "offset": 10187523,
          "size": 16384
        },
        "a565": {
          "name": "a565",
          "offset": 10203907,
          "size": 16384
        },
        "a566": {
          "name": "a566",
          "offset": 9777923,
          "size": 147456
        },
        "a567": {
          "name": "a567",
          "offset": 10105603,
          "size": 16384
        },
        "a568": {
          "name": "a568",
          "offset": 10121987,
          "size": 16384
        },
        "a569": {
          "name": "a569",
          "offset": 9777923,
          "size": 147456
        },
        "a570": {
          "name": "a570",
          "offset": 10105603,
          "size": 16384
        },
        "a571": {
          "name": "a571",
          "offset": 10269443,
          "size": 16384
        },
        "a572": {
          "name": "a572",
          "offset": 9777923,
          "size": 147456
        },
        "a573": {
          "name": "a573",
          "offset": 10187523,
          "size": 16384
        },
        "a574": {
          "name": "a574",
          "offset": 10138371,
          "size": 16384
        },
        "a575": {
          "name": "a575",
          "offset": 9777923,
          "size": 147456
        },
        "a576": {
          "name": "a576",
          "offset": 10171139,
          "size": 16384
        },
        "a577": {
          "name": "a577",
          "offset": 10154755,
          "size": 16384
        },
        "a578": {
          "name": "a578",
          "offset": 9777923,
          "size": 147456
        },
        "a579": {
          "name": "a579",
          "offset": 10171139,
          "size": 16384
        },
        "a580": {
          "name": "a580",
          "offset": 10236675,
          "size": 16384
        },
        "a581": {
          "name": "a581",
          "offset": 9777923,
          "size": 147456
        },
        "a582": {
          "name": "a582",
          "offset": 10187523,
          "size": 16384
        },
        "a583": {
          "name": "a583",
          "offset": 10138371,
          "size": 16384
        },
        "a584": {
          "name": "a584",
          "offset": 9777923,
          "size": 147456
        },
        "a585": {
          "name": "a585",
          "offset": 10236675,
          "size": 16384
        },
        "a586": {
          "name": "a586",
          "offset": 10171139,
          "size": 16384
        },
        "a587": {
          "name": "a587",
          "offset": 9777923,
          "size": 147456
        },
        "a588": {
          "name": "a588",
          "offset": 10105603,
          "size": 16384
        },
        "a589": {
          "name": "a589",
          "offset": 10121987,
          "size": 16384
        },
        "a590": {
          "name": "a590",
          "offset": 9777923,
          "size": 147456
        },
        "a591": {
          "name": "a591",
          "offset": 10171139,
          "size": 16384
        },
        "a592": {
          "name": "a592",
          "offset": 10269443,
          "size": 16384
        },
        "a593": {
          "name": "a593",
          "offset": 9777923,
          "size": 147456
        },
        "a594": {
          "name": "a594",
          "offset": 10269443,
          "size": 16384
        },
        "a595": {
          "name": "a595",
          "offset": 10236675,
          "size": 16384
        },
        "a596": {
          "name": "a596",
          "offset": 9777923,
          "size": 147456
        },
        "a597": {
          "name": "a597",
          "offset": 10203907,
          "size": 16384
        },
        "a598": {
          "name": "a598",
          "offset": 10220291,
          "size": 16384
        },
        "a599": {
          "name": "a599",
          "offset": 9777923,
          "size": 147456
        },
        "a600": {
          "name": "a600",
          "offset": 10269443,
          "size": 16384
        },
        "a601": {
          "name": "a601",
          "offset": 10253059,
          "size": 16384
        },
        "a602": {
          "name": "a602",
          "offset": 9777923,
          "size": 147456
        },
        "a603": {
          "name": "a603",
          "offset": 10269443,
          "size": 16384
        },
        "a604": {
          "name": "a604",
          "offset": 10154755,
          "size": 16384
        },
        "a605": {
          "name": "a605",
          "offset": 9777923,
          "size": 147456
        },
        "a606": {
          "name": "a606",
          "offset": 10187523,
          "size": 16384
        },
        "a607": {
          "name": "a607",
          "offset": 10171139,
          "size": 16384
        },
        "a608": {
          "name": "a608",
          "offset": 9777923,
          "size": 147456
        },
        "a609": {
          "name": "a609",
          "offset": 10236675,
          "size": 16384
        },
        "a610": {
          "name": "a610",
          "offset": 10253059,
          "size": 16384
        },
        "a611": {
          "name": "a611",
          "offset": 9777923,
          "size": 147456
        },
        "a612": {
          "name": "a612",
          "offset": 10187523,
          "size": 16384
        },
        "a613": {
          "name": "a613",
          "offset": 10023683,
          "size": 16384
        },
        "a614": {
          "name": "a614",
          "offset": 9777923,
          "size": 147456
        },
        "a615": {
          "name": "a615",
          "offset": 10007299,
          "size": 16384
        },
        "a616": {
          "name": "a616",
          "offset": 10072835,
          "size": 16384
        },
        "a617": {
          "name": "a617",
          "offset": 9777923,
          "size": 147456
        },
        "a618": {
          "name": "a618",
          "offset": 9925379,
          "size": 65536
        },
        "a619": {
          "name": "a619",
          "offset": 9990915,
          "size": 65536
        },
        "a620": {
          "name": "a620",
          "offset": 9843459,
          "size": 65536
        },
        "a621": {
          "name": "a621",
          "offset": 9777923,
          "size": 65536
        },
        "a622": {
          "name": "a622",
          "offset": 8925955,
          "size": 589824
        },
        "a623": {
          "name": "a623",
          "offset": 9515779,
          "size": 262144
        },
        "a624": {
          "name": "a624",
          "offset": 8925955,
          "size": 262144
        },
        "a625": {
          "name": "a625",
          "offset": 9515779,
          "size": 262144
        },
        "a626": {
          "name": "a626",
          "offset": 9777923,
          "size": 262144
        },
        "a627": {
          "name": "a627",
          "offset": 4469507,
          "size": 2359296
        },
        "a628": {
          "name": "a628",
          "offset": 6828803,
          "size": 1048576
        },
        "a629": {
          "name": "a629",
          "offset": 7877379,
          "size": 1048576
        },
        "a630": {
          "name": "a630",
          "offset": 8925955,
          "size": 1048576
        },
        "a631": {
          "name": "a631",
          "offset": 89404163,
          "size": 1048576
        },
        "a632": {
          "name": "a632",
          "offset": 4469507,
          "size": 84934656
        },
        "a633": {
          "name": "a633",
          "offset": 89404163,
          "size": 49152
        },
        "a513": {
          "name": "a513",
          "offset": 9990915,
          "size": 49152
        },
        "a325": {
          "name": "a325",
          "offset": 0,
          "size": 2719744
        },
        "a326": {
          "name": "a326",
          "offset": 2719744,
          "size": 16384
        },
        "a327": {
          "name": "a327",
          "offset": 2736128,
          "size": 16384
        },
        "a328": {
          "name": "a328",
          "offset": 2752512,
          "size": 16384
        },
        "a329": {
          "name": "a329",
          "offset": 2768896,
          "size": 16384
        },
        "a330": {
          "name": "a330",
          "offset": 2785280,
          "size": 36864
        },
        "a331": {
          "name": "a331",
          "offset": 2822144,
          "size": 64
        },
        "a332": {
          "name": "a332",
          "offset": 2822208,
          "size": 64
        },
        "a333": {
          "name": "a333",
          "offset": 2822272,
          "size": 64
        },
        "a334": {
          "name": "a334",
          "offset": 2822336,
          "size": 64
        },
        "a335": {
          "name": "a335",
          "offset": 2822400,
          "size": 36864
        },
        "a336": {
          "name": "a336",
          "offset": 2859264,
          "size": 64
        },
        "a337": {
          "name": "a337",
          "offset": 2859328,
          "size": 64
        },
        "a338": {
          "name": "a338",
          "offset": 2859392,
          "size": 64
        },
        "a339": {
          "name": "a339",
          "offset": 2859456,
          "size": 64
        },
        "a340": {
          "name": "a340",
          "offset": 2859520,
          "size": 36864
        },
        "a341": {
          "name": "a341",
          "offset": 2896384,
          "size": 64
        },
        "a342": {
          "name": "a342",
          "offset": 2896448,
          "size": 64
        },
        "a343": {
          "name": "a343",
          "offset": 2896512,
          "size": 64
        },
        "a344": {
          "name": "a344",
          "offset": 2896576,
          "size": 64
        },
        "a345": {
          "name": "a345",
          "offset": 2896640,
          "size": 36864
        },
        "a346": {
          "name": "a346",
          "offset": 2933504,
          "size": 64
        },
        "a347": {
          "name": "a347",
          "offset": 2933568,
          "size": 64
        },
        "a348": {
          "name": "a348",
          "offset": 2933632,
          "size": 64
        },
        "a349": {
          "name": "a349",
          "offset": 2933696,
          "size": 64
        },
        "a350": {
          "name": "a350",
          "offset": 2933760,
          "size": 36864
        },
        "a351": {
          "name": "a351",
          "offset": 2970624,
          "size": 64
        },
        "a352": {
          "name": "a352",
          "offset": 2970688,
          "size": 64
        },
        "a353": {
          "name": "a353",
          "offset": 2970752,
          "size": 64
        },
        "a354": {
          "name": "a354",
          "offset": 2970816,
          "size": 64
        },
        "a355": {
          "name": "a355",
          "offset": 2970880,
          "size": 36864
        },
        "a356": {
          "name": "a356",
          "offset": 3007744,
          "size": 64
        },
        "a357": {
          "name": "a357",
          "offset": 3007808,
          "size": 64
        },
        "a358": {
          "name": "a358",
          "offset": 3007872,
          "size": 64
        },
        "a359": {
          "name": "a359",
          "offset": 3007936,
          "size": 64
        },
        "a360": {
          "name": "a360",
          "offset": 3008000,
          "size": 36864
        },
        "a361": {
          "name": "a361",
          "offset": 3044864,
          "size": 64
        },
        "a362": {
          "name": "a362",
          "offset": 3044928,
          "size": 64
        },
        "a363": {
          "name": "a363",
          "offset": 3044992,
          "size": 64
        },
        "a364": {
          "name": "a364",
          "offset": 3045056,
          "size": 64
        },
        "a365": {
          "name": "a365",
          "offset": 3045120,
          "size": 36864
        },
        "a366": {
          "name": "a366",
          "offset": 3081984,
          "size": 64
        },
        "a367": {
          "name": "a367",
          "offset": 3082048,
          "size": 64
        },
        "a368": {
          "name": "a368",
          "offset": 3082112,
          "size": 64
        },
        "a369": {
          "name": "a369",
          "offset": 3082176,
          "size": 64
        },
        "a370": {
          "name": "a370",
          "offset": 3082240,
          "size": 36864
        },
        "a371": {
          "name": "a371",
          "offset": 3119104,
          "size": 64
        },
        "a372": {
          "name": "a372",
          "offset": 3119168,
          "size": 64
        },
        "a373": {
          "name": "a373",
          "offset": 3119232,
          "size": 64
        },
        "a374": {
          "name": "a374",
          "offset": 3119296,
          "size": 64
        },
        "a375": {
          "name": "a375",
          "offset": 3119360,
          "size": 36864
        },
        "a376": {
          "name": "a376",
          "offset": 3156224,
          "size": 64
        },
        "a377": {
          "name": "a377",
          "offset": 3156288,
          "size": 64
        },
        "a378": {
          "name": "a378",
          "offset": 3156352,
          "size": 64
        },
        "a379": {
          "name": "a379",
          "offset": 3156416,
          "size": 64
        },
        "a380": {
          "name": "a380",
          "offset": 3156480,
          "size": 36864
        },
        "a381": {
          "name": "a381",
          "offset": 3193344,
          "size": 64
        },
        "a382": {
          "name": "a382",
          "offset": 3193408,
          "size": 64
        },
        "a383": {
          "name": "a383",
          "offset": 3193472,
          "size": 64
        },
        "a384": {
          "name": "a384",
          "offset": 3193536,
          "size": 64
        },
        "a385": {
          "name": "a385",
          "offset": 3193600,
          "size": 36864
        },
        "a386": {
          "name": "a386",
          "offset": 3230464,
          "size": 64
        },
        "a387": {
          "name": "a387",
          "offset": 3230528,
          "size": 64
        },
        "a388": {
          "name": "a388",
          "offset": 3230592,
          "size": 64
        },
        "a389": {
          "name": "a389",
          "offset": 3230656,
          "size": 64
        },
        "a390": {
          "name": "a390",
          "offset": 3230720,
          "size": 36864
        },
        "a391": {
          "name": "a391",
          "offset": 3267584,
          "size": 64
        },
        "a392": {
          "name": "a392",
          "offset": 3267648,
          "size": 64
        },
        "a393": {
          "name": "a393",
          "offset": 3267712,
          "size": 64
        },
        "a394": {
          "name": "a394",
          "offset": 3267776,
          "size": 64
        },
        "a395": {
          "name": "a395",
          "offset": 3267840,
          "size": 36864
        },
        "a396": {
          "name": "a396",
          "offset": 3304704,
          "size": 64
        },
        "a397": {
          "name": "a397",
          "offset": 3304768,
          "size": 64
        },
        "a398": {
          "name": "a398",
          "offset": 3304832,
          "size": 64
        },
        "a399": {
          "name": "a399",
          "offset": 3304896,
          "size": 64
        },
        "a400": {
          "name": "a400",
          "offset": 3304960,
          "size": 36864
        },
        "a401": {
          "name": "a401",
          "offset": 3341824,
          "size": 64
        },
        "a402": {
          "name": "a402",
          "offset": 3341888,
          "size": 64
        },
        "a403": {
          "name": "a403",
          "offset": 3341952,
          "size": 64
        },
        "a404": {
          "name": "a404",
          "offset": 3342016,
          "size": 64
        },
        "a405": {
          "name": "a405",
          "offset": 3342080,
          "size": 36864
        },
        "a406": {
          "name": "a406",
          "offset": 3378944,
          "size": 64
        },
        "a407": {
          "name": "a407",
          "offset": 3379008,
          "size": 64
        },
        "a408": {
          "name": "a408",
          "offset": 3379072,
          "size": 64
        },
        "a409": {
          "name": "a409",
          "offset": 3379136,
          "size": 64
        },
        "a410": {
          "name": "a410",
          "offset": 3379200,
          "size": 36864
        },
        "a411": {
          "name": "a411",
          "offset": 3416064,
          "size": 64
        },
        "a412": {
          "name": "a412",
          "offset": 3416128,
          "size": 64
        },
        "a413": {
          "name": "a413",
          "offset": 3416192,
          "size": 64
        },
        "a414": {
          "name": "a414",
          "offset": 3416256,
          "size": 64
        },
        "a415": {
          "name": "a415",
          "offset": 3416320,
          "size": 36864
        },
        "a416": {
          "name": "a416",
          "offset": 3453184,
          "size": 64
        },
        "a417": {
          "name": "a417",
          "offset": 3453248,
          "size": 64
        },
        "a418": {
          "name": "a418",
          "offset": 3453312,
          "size": 64
        },
        "a419": {
          "name": "a419",
          "offset": 3453376,
          "size": 64
        },
        "a420": {
          "name": "a420",
          "offset": 3453440,
          "size": 36864
        },
        "a421": {
          "name": "a421",
          "offset": 3490304,
          "size": 64
        },
        "a422": {
          "name": "a422",
          "offset": 3490368,
          "size": 64
        },
        "a423": {
          "name": "a423",
          "offset": 3490432,
          "size": 64
        },
        "a424": {
          "name": "a424",
          "offset": 3490496,
          "size": 64
        },
        "a425": {
          "name": "a425",
          "offset": 3490560,
          "size": 36864
        },
        "a426": {
          "name": "a426",
          "offset": 3527424,
          "size": 64
        },
        "a427": {
          "name": "a427",
          "offset": 3527488,
          "size": 64
        },
        "a428": {
          "name": "a428",
          "offset": 3527552,
          "size": 64
        },
        "a429": {
          "name": "a429",
          "offset": 3527616,
          "size": 64
        },
        "a430": {
          "name": "a430",
          "offset": 3527680,
          "size": 36864
        },
        "a431": {
          "name": "a431",
          "offset": 3564544,
          "size": 64
        },
        "a432": {
          "name": "a432",
          "offset": 3564608,
          "size": 64
        },
        "a433": {
          "name": "a433",
          "offset": 3564672,
          "size": 64
        },
        "a434": {
          "name": "a434",
          "offset": 3564736,
          "size": 64
        },
        "a435": {
          "name": "a435",
          "offset": 3564800,
          "size": 36864
        },
        "a436": {
          "name": "a436",
          "offset": 3601664,
          "size": 64
        },
        "a437": {
          "name": "a437",
          "offset": 3601728,
          "size": 64
        },
        "a438": {
          "name": "a438",
          "offset": 3601792,
          "size": 64
        },
        "a439": {
          "name": "a439",
          "offset": 3601856,
          "size": 64
        },
        "a440": {
          "name": "a440",
          "offset": 3601920,
          "size": 36864
        },
        "a441": {
          "name": "a441",
          "offset": 3638784,
          "size": 64
        },
        "a442": {
          "name": "a442",
          "offset": 3638848,
          "size": 64
        },
        "a443": {
          "name": "a443",
          "offset": 3638912,
          "size": 64
        },
        "a444": {
          "name": "a444",
          "offset": 3638976,
          "size": 64
        },
        "a445": {
          "name": "a445",
          "offset": 3639040,
          "size": 36864
        },
        "a446": {
          "name": "a446",
          "offset": 3675904,
          "size": 64
        },
        "a447": {
          "name": "a447",
          "offset": 3675968,
          "size": 64
        },
        "a448": {
          "name": "a448",
          "offset": 3676032,
          "size": 64
        },
        "a449": {
          "name": "a449",
          "offset": 3676096,
          "size": 64
        },
        "a450": {
          "name": "a450",
          "offset": 3676160,
          "size": 36864
        },
        "a451": {
          "name": "a451",
          "offset": 3713024,
          "size": 64
        },
        "a452": {
          "name": "a452",
          "offset": 3713088,
          "size": 64
        },
        "a453": {
          "name": "a453",
          "offset": 3713152,
          "size": 64
        },
        "a454": {
          "name": "a454",
          "offset": 3713216,
          "size": 64
        },
        "a455": {
          "name": "a455",
          "offset": 3713280,
          "size": 36864
        },
        "a456": {
          "name": "a456",
          "offset": 3750144,
          "size": 64
        },
        "a457": {
          "name": "a457",
          "offset": 3750208,
          "size": 64
        },
        "a458": {
          "name": "a458",
          "offset": 3750272,
          "size": 64
        },
        "a459": {
          "name": "a459",
          "offset": 3750336,
          "size": 64
        },
        "a460": {
          "name": "a460",
          "offset": 3750400,
          "size": 36864
        },
        "a461": {
          "name": "a461",
          "offset": 3787264,
          "size": 64
        },
        "a462": {
          "name": "a462",
          "offset": 3787328,
          "size": 64
        },
        "a463": {
          "name": "a463",
          "offset": 3787392,
          "size": 64
        },
        "a464": {
          "name": "a464",
          "offset": 3787456,
          "size": 64
        },
        "a465": {
          "name": "a465",
          "offset": 3787520,
          "size": 36864
        },
        "a466": {
          "name": "a466",
          "offset": 3824384,
          "size": 64
        },
        "a467": {
          "name": "a467",
          "offset": 3824448,
          "size": 64
        },
        "a468": {
          "name": "a468",
          "offset": 3824512,
          "size": 64
        },
        "a469": {
          "name": "a469",
          "offset": 3824576,
          "size": 64
        },
        "a470": {
          "name": "a470",
          "offset": 3824640,
          "size": 36864
        },
        "a471": {
          "name": "a471",
          "offset": 3861504,
          "size": 64
        },
        "a472": {
          "name": "a472",
          "offset": 3861568,
          "size": 64
        },
        "a473": {
          "name": "a473",
          "offset": 3861632,
          "size": 64
        },
        "a474": {
          "name": "a474",
          "offset": 3861696,
          "size": 64
        },
        "a475": {
          "name": "a475",
          "offset": 3861760,
          "size": 36864
        },
        "a476": {
          "name": "a476",
          "offset": 3898624,
          "size": 64
        },
        "a477": {
          "name": "a477",
          "offset": 3898688,
          "size": 64
        },
        "a478": {
          "name": "a478",
          "offset": 3898752,
          "size": 64
        },
        "a479": {
          "name": "a479",
          "offset": 3898816,
          "size": 64
        },
        "a480": {
          "name": "a480",
          "offset": 3898880,
          "size": 36864
        },
        "a481": {
          "name": "a481",
          "offset": 3935744,
          "size": 64
        },
        "a482": {
          "name": "a482",
          "offset": 3935808,
          "size": 64
        },
        "a483": {
          "name": "a483",
          "offset": 3935872,
          "size": 64
        },
        "a484": {
          "name": "a484",
          "offset": 3935936,
          "size": 64
        },
        "a485": {
          "name": "a485",
          "offset": 3936000,
          "size": 36864
        },
        "a486": {
          "name": "a486",
          "offset": 3972864,
          "size": 64
        },
        "a487": {
          "name": "a487",
          "offset": 3972928,
          "size": 64
        },
        "a488": {
          "name": "a488",
          "offset": 3972992,
          "size": 64
        },
        "a489": {
          "name": "a489",
          "offset": 3973056,
          "size": 64
        },
        "a490": {
          "name": "a490",
          "offset": 3973120,
          "size": 36864
        },
        "a491": {
          "name": "a491",
          "offset": 4009984,
          "size": 64
        },
        "a492": {
          "name": "a492",
          "offset": 4010048,
          "size": 64
        },
        "a493": {
          "name": "a493",
          "offset": 4010112,
          "size": 64
        },
        "a494": {
          "name": "a494",
          "offset": 4010176,
          "size": 64
        },
        "a495": {
          "name": "a495",
          "offset": 4010240,
          "size": 147456
        },
        "a496": {
          "name": "a496",
          "offset": 4157696,
          "size": 256
        },
        "a497": {
          "name": "a497",
          "offset": 4157952,
          "size": 64
        },
        "a498": {
          "name": "a498",
          "offset": 4158016,
          "size": 64
        },
        "a499": {
          "name": "a499",
          "offset": 4158080,
          "size": 64
        },
        "a500": {
          "name": "a500",
          "offset": 4158144,
          "size": 147456
        },
        "a501": {
          "name": "a501",
          "offset": 4305600,
          "size": 256
        },
        "a502": {
          "name": "a502",
          "offset": 4305856,
          "size": 64
        },
        "a503": {
          "name": "a503",
          "offset": 4305920,
          "size": 64
        },
        "a504": {
          "name": "a504",
          "offset": 4305984,
          "size": 64
        },
        "a505": {
          "name": "a505",
          "offset": 4306048,
          "size": 147456
        },
        "a506": {
          "name": "a506",
          "offset": 4453504,
          "size": 256
        },
        "a507": {
          "name": "a507",
          "offset": 4453760,
          "size": 64
        },
        "a508": {
          "name": "a508",
          "offset": 4453824,
          "size": 64
        },
        "a509": {
          "name": "a509",
          "offset": 4453888,
          "size": 64
        },
        "a510": {
          "name": "a510",
          "offset": 4453952,
          "size": 15552
        },
        "a511": {
          "name": "a511",
          "offset": 4469504,
          "size": 3
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "a512"
  ],
  "outputs": [
    "a513"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}